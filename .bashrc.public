# .bashrc - public
# aliases/config to share & store in public repo

### aliases ###
alias sb='source $HOME/.bashrc'

alias ..='cd ..'
alias ...='cd .. && cd ..'
alias ....='cd .. && cd .. && cd ..'

alias l='ls'
alias ll='ls -l'
alias lrt='ls -lrt'
alias la='ls -A'
alias lal='ls -lA'
alias lla='ls -lA'
alias lart='ls -lArt'
alias l.='ls -d .*'

# If we've installed GNU coreutils and set default, configure
if [ `uname` == "Darwin" ]; then
    CORE_PATH="/usr/local/opt/coreutils/libexec/gnubin"
    FIND_PATH="/usr/local/opt/findutils/libexec/gnubin"
    TAR_PATH="/usr/local/opt/gnu-tar/libexec/gnubin"
    SED_PATH="/usr/local/opt/gnu-sed/libexec/gnubin"
    EXTRA_PATHS="/usr/local/opt/gettext/bin /usr/local/opt/gnu-getopt/bin"
    UTIL_PATHS="$EXTRA_PATHS $SED_PATH $TAR_PATH $FIND_PATH $CORE_PATH"

    #
    # TODO: Insert check to see if these PATHs are already present,
    # but in the wrong position (at end/after default /usr/bin:/bin)
    # This can happen on OS/X if we execute a bash shell after
    # another login shell (eg: system configured to use fish,
    # but another process brings us to bash shell - vcsh comes
    # to mind)
    #
    # It is too difficult to rearrange the PATH if necessary with
    # bash.  A quick hack is to edit /etc/profile on OS/X and set
    # the PATH="" before path_helper is invoked, this way it will
    # have a "clean slate" and the PATHs desired here will not
    # be present when execution arrives here, and thus will be
    # placed in their correct positions
    #

    # Dynamically configure missing PATHs
    # As mentioned above, this will NOT detect conditions
    # where the PATHs are present, but in the wrong priority
    for P in $UTIL_PATHS;
    do {
        # http://stackoverflow.com/questions/1396066/detect-if-users-path-has-a-specific-directory-in-it
        if [[ ":$PATH:" != *":$P:"* ]]; then
            if [ -d "$P" ]; then
                export PATH="$P:$PATH"

                # Being lazy here
                MP=$(echo $P | sed 's/gnubin/gnuman/g')
                if [ -d "$MP" ]; then
                    export MANPATH="$MP:$MANPATH"
                fi
            fi
        fi
    } done
    echo $PATH

    if [ `which ls` == "/usr/local/opt/coreutils/libexec/gnubin/ls" ]; then
        alias ls='ls --color'
    fi
fi

alias c='clear'
alias f='find'
alias h='history'

alias rm='rm -i'

alias less='less -R'
alias sl='less'

alias t='tail'
alias tf='tail -f'
alias tF='tail -F'

# df in MiB, du in KiB
alias df='df -m'
alias du='du -k'

alias dud='du -d 1'

# Platform/utils specific settings
# Only GNU du supports '-S' for separate-dirs
if [ `uname` == "Darwin" ]; then
    if [ `which du` == "/usr/local/opt/coreutils/libexec/gnubin/du" ]; then
        alias duds='du -S -d 1'
    fi
else
    alias duds='du -S -d 1'
fi

# grep #
alias grep='grep --color=auto'

alias g='grep'
alias gi='grep -i'
alias gr='grep -R'
alias gir='grep -iR'

alias gv='grep -v'
alias giv='grep -iv'
alias girv='grep -ivR'

alias gcnc="egrep -v '^\w*#|^\w*\$'"
alias gsvn="grep -v '\.svn'"
# export GREP_OPTIONS='--color=auto'     # deprecated

# ack #
# TODO: install/configure ack with config mgmt?
alias a='ack'
alias ai='ack -i'
alias aq='ack -Q'
alias aiq='ack -iQ'

alias av='ack -v'
alias aiv='ack -iv'
alias aqv='ack -Qv'
alias aiqv='ack -iQv'

# git #
function gcr() {
    which git >/dev/null 2>&1
    if [ "$?" -ne 0 ]; then
        echo "git not found!"
        return
    fi
    GIT_ROOT=$(git rev-parse --show-toplevel 2>/dev/null)
    if [ "$?" -eq 0 ]; then
        cd $GIT_ROOT
    else
        echo "not in a git repo!"
    fi
}

alias gco='git checkout'
alias gcob='git checkout -b'
alias gbr='git branch'
alias gbra='git branch -a'
alias gst='git status'
alias gdi='git diff'
alias gdic='git diff --cached'
alias gdit='git difftool'
alias gditc='git difftool --cached'
alias ga='git add'
alias gau='git add -u'
alias glog='git glog'
alias gci='git commit'
alias gcim='git commit -m'
alias grm='git remote'
alias grmv='git remote -v'
alias glom='git pull origin master'
alias gsom='git push origin master'
#alias gcr='_gcr'
#alias cgr='_gcr'

# Helper function to git push with temporary permissions,
# in case you don't want to leave the unlocked key in your keyring
function gsomv() {
    KEY=$(ls -1 $HOME/.ssh/id_github* | grep -v '\.pub')
    ssh-add $KEY
    git push origin master
    ssh-add -d $KEY
}

# vcsh #
#function _vs() {
#    which vcsh >/dev/null 2>&1
#    if [ "$?" -ne 0 ]; then
#        echo "vcsh not found!"
#        return
#    fi
#    vcsh $1 status
#}
#alias vs='_vs'

# tmux #
function _ta() {
    tmux ls >/dev/null
    if [ "$?" -ne 0 ]; then
        return
    fi
    if [ `tmux ls | wc -l` -eq 1 ]; then
        tmux attach
    elif [ "$1" == "" ]; then
        echo "[error] no session specified!"
        echo "Current sessions:"
        tmux ls
    else
        tmux attach -t $1
    fi
}

function _tda() {
    tmux ls >/dev/null
    if [ "$?" -ne 0 ]; then
        return
    fi
    if [ `tmux ls | wc -l` -eq 1 ]; then
        tmux detach
        tmux attach
    elif [ "$1" == "" ]; then
        echo "[error] no session specified!"
        echo "Current sessions:"
        tmux ls
    else
        tmux detach -s $1
        tmux attach -t $1
    fi
}

alias tls='tmux ls'
alias tns='tmux new-session -s'
alias ta='_ta'
alias td='tmux detach -s'
alias tda='_tda'

# ssh #
alias ssa='eval `ssh-agent -s`'

## distro-specific ##
# package manager #
if [ -x "/usr/bin/apt-get" ]; then
    alias acs='apt-cache search'
    alias agi='sudo apt-get install'
fi
if [ -x "/usr/bin/yum" ]; then
    alias ys='sudo yum search'
    alias yi='sudo yum install'
fi


### other environment variables ###
# set TERM
if [ $TERM == "xterm" -o "$COLORTERM" == "gnome-terminal" ]; then
    export TERM=xterm-256color
fi

# add $HOME/bin to PATH
# http://stackoverflow.com/questions/1396066/detect-if-users-path-has-a-specific-directory-in-it
if [[ ":$PATH:" != *":$HOME/bin:"* ]]; then
    export PATH="$HOME/bin:$PATH"
fi

# editor
export EDITOR=vim


## history ##
# ignore stuff, set history size
HISTCONTROL=ignoredups:ignorespace
HISTIGNORE=ls:ll:la:cd:pwd:exit:clear:bg
HISTSIZE=100000
HISTFILESIZE=100000

# save multi-line commands as one
shopt -s cmdhist

# append to the history file, don't overwrite it
shopt -s histappend


# unfuck BSD defaults #
BLOCKSIZE=1024


### functions ###
function set_term_title() {
   echo -en "\033]0;$1\a"
}

# perform call $1 for each argument that follows
function iev() {
    CMD=$1; shift
    for i in $@; do { echo $i; $CMD $i; } done
}

function glc() {
    if [ "$1" -gt 0 ]; then
        cat - | tail -n+$1 | head -1
    elif [ "$1" -lt 0 ]; then
        cat - | tail -n$1 | head -1
    fi
}

# diff a file via SSH
function sshdiff() {
    if [ -z "$1" ]; then
        echo "Usage: sshdiff host file [args to diff]"
    else
        host=$1; shift
        file=$1; shift
        args=$@
        ssh $host cat $file | diff $file $args -
    fi
}

